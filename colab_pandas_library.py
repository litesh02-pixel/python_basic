# -*- coding: utf-8 -*-
"""colab_Pandas_library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1foBbvB8cd0yK44Cme2gNbdQp2ClqDQOB

#complete pyhton library for M.L.
"""

#pandas Library:
#useful for data processing & analysis
#pandas data frame: It is 2-D tabular data structure with labled axes (rows & columns)
#importing the pandas library

import pandas as pd

from sklearn.datasets import load_iris

iris_dataset=load_iris()

print(iris_dataset)
type(iris_dataset)

#pandas dataframe
iris_df=pd.DataFrame(iris_dataset.data,columns=iris_dataset.feature_names)
iris_df.head()
iris_df.shape
type(iris_df)
print(iris_df)

#Importing the data from a CSV file to a pandas data frame
#CSV file to pandas df
diabetes_df=pd.read_csv('/content/diabetes.csv')
type(diabetes_df)

diabetes_df.head()

diabetes_df.shape
print(diabetes_df)

############for loading excel file to a pandas data frame
#pd.read_excel('path of file)

#exporting a data frame to a csv file
diabetes_df.to_csv('diabetes.csv')

#load/exporting pandas data frame to an excel file
diabetes_df.to_excel('diabetes_df')

"""#Creating data frame with randon value"""

import numpy as np
random_df=pd.DataFrame(np.random.rand(20,10))

random_df.head()  #Create/print first five row

random_df.shape

"""#Inspecting a dataframe"""

diabetes_df.shape

diabetes_df.head()

diabetes_df.tail()  #print last five row

diabetes_df.info()

diabetes_df.isnull().sum()    #find the missing value

#counting the value based on the labels
diabetes_df.value_counts("Outcome")

#group the values based on the mean
diabetes_df.groupby('Outcome').mean()

"""#Statistical Measures:"""

#Count or number of values Column wise
diabetes_df.count()

# mean values Column wise
diabetes_df.mean()

#standard Deviation column wise
diabetes_df.std()

#minimum values column wise
diabetes_df.min()

diabetes_df.max()

#All the staistical measures about the dataframe
diabetes_df.describe()

"""#Manipulatin the dataframe 

"""

#add/insert a column to the dataframe
diabetes_df['price']=diabetes_df.Age
diabetes_df.head()

#removing a particular row
diabetes_df.drop(index=0,axis=0)

#drop/remove a column
diabetes_df.drop('price',axis=1)

#Locating/printing a particular row using th eindex value
diabetes_df.iloc[2]

#locating a column
print(diabetes_df.iloc[:,0])
print(diabetes_df.iloc[:,1])
print(diabetes_df.iloc[:,2])
print(diabetes_df.iloc[:,-1])

#correlation
diabetes_df.corr()

