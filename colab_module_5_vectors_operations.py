# -*- coding: utf-8 -*-
"""colab_module_5_vectors_operations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eZBcaZ4ZfEHJJ-7lOAoVGid6vZSp8GCu

Vector-Addition, subtraction, multiplication
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set()    #provide grid on graph

#plotting a vector
plt.quiver(0,0,4,5)
plt.show()

plt.quiver(0,0,4,5,scale_units='xy',angles='xy',scale=1,color='r')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

#plotting multiple vector
plt.quiver(0,0,4,5,scale_units='xy',angles='xy',scale=1,color='r')
plt.quiver(0,0,-3,-5,scale_units='xy',angles='xy',scale=1,color='b')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

#Addition of two vector
vector_1=np.asarray([0,0,2,3])
vector_2=np.asarray([0,0,3,-2])
sum=vector_1+vector_2
print(sum)

#Plotting three vector
plt.quiver(0,0,2,3,scale_units='xy',angles='xy',scale=1,color='r')
plt.quiver(0,0,3,-2,scale_units='xy',angles='xy',scale=1,color='b')
plt.quiver(0,0,5,1,scale_units="xy",angles="xy",scale=1,color='g')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

#subtraction of two vector
vector_1=np.asarray([0,0,2,3])
vector_2=np.asarray([0,0,4,5])
difference=vector_1-vector_2
print(difference)

#Plotting three vector after difference
plt.quiver(0,0,2,3,scale_units='xy',angles='xy',scale=1,color='r')
plt.quiver(0,0,4,5,scale_units='xy',angles='xy',scale=1,color='b')
plt.quiver(0,0,-2,-2,scale_units="xy",angles="xy",scale=1,color='g')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

#multiplication of a vector by scalar
vector_1=np.asarray([0,0,2,3])
vector_2=5*vector_1
print(vector_2)

#Plotting three vector after scalar multiplication
plt.quiver(0,0,2,3,scale_units='xy',angles='xy',scale=1,color='r')
#plt.quiver(0,0,4,5,scale_units='xy',angles='xy',scale=1,color='b')
plt.quiver(0,0,10,15,scale_units="xy",angles="xy",scale=1,color='g')
plt.xlim(-20,20)
plt.ylim(-20,20)
plt.show()

"""Dot product of two vector"""

a=np.array([2,3])
b=np.array([4,4])

print(a)
print(b)

a_dot_b=np.dot(a,b)
print(a_dot_b)

#Dot product of two vector for 3D
c=np.array([2,3,4])
d=np.array([4,5,6])
print(c)
print(d)

c_dot_d=np.dot(c,d)
print(c_dot_d)

#cross product of two vector
a=np.array([2,3])
b=np.array([4,5])
a_cross_b=np.cross(a,b)
print(a_cross_b)

c=np.array([2,3,4])
d-np.array([4,5,6])
c_cross_d=np.cross(c,d)
print(c_cross_d)

#Projection of a vector on v vector

a=np.array([2,5])
v=np.array([8,-6])
#magnitude of vector v
magnitude_of_v = np.sqrt((v*v).sum(axis=0))
proj_of_a_on_v=(np.dot(a,b)/magnitude_of_v)*v
print('Projrction of a vector on v vectoris ',proj_of_a_on_v)

a=np.array([2,5,7])
v=np.array([8,-6,9])
#magnitude of vector v
magnitude_of_v = np.sqrt(sum(v**2))
proj_of_a_on_v=(np.dot(a,b)/magnitude_of_v)*v
print('Projrction of a vector on v vectoris ',proj_of_a_on_v)

print(v)

